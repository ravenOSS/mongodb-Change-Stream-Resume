#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
// require('../socketConn')
// require('../changeStreamBasic')
var debug = require('debug')('plotlychangestream:server')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create HTTP server.
 */

const server = require('http').createServer(app)

// /**
//  * Create socket.io instance
//  */
const io = require('socket.io')(server)

io.on('connection', socket => {
  console.log(`Client connected: ${socket.id}`)
  socket.emit('serverMsg', 'Hello client, again')
  socket.on('clientMsg', (msg) => {
    console.log(`Client message: ${msg}`)
  })
})

const transmit = data => {
  io.emit('serverMsg', data)
  console.log(`Data emitted`)
}
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}
// ===================================================
const dotenv = require('dotenv').config()
const MongoClient = require('mongodb').MongoClient
// const io = require('socket.io')
const assert = require('assert')
const EJSON = require('mongodb-extjson')

const atlasURL = process.env.atlasURL

const client = new MongoClient(atlasURL, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  keepAlive: true,
  connectTimeoutMS: 60000,
  socketTimeoutMS: 60000
})

client.connect(err => {
  assert.strictEqual(null, err)
  if (err) {
    console.log(`We've got a problem`)
  } else {
    console.log('Connected successfully to MongoDB')
  }
  const db = client.db('plottingData')
  const collection = db.collection('streamTest')
  const pipeline = {
    $match: {
      operationType: {
        $in: ['insert']
      }
    }
  }

  let changeStream

  const startStream = () => {
    console.log(`startStream`)
    changeStream = collection.watch([pipeline], {
      fullDocument: 'updateLookup' })
    changeStream.on('change', document => {
      const packet = []
      packet[0] = document.fullDocument.TimeStamp
      packet[1] = document.fullDocument.Data
      transmit(packet)
    })
  }
  startStream()

  // const transmit = (data) => {
  //   console.log(`packet: ${data}`)
  // }
})
//=============================================

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  var addr = server.address()
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}
